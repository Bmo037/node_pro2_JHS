<!doctype html>
<html>
<head>
  <title>사우론٩(ↀДↀ)۶</title>
  <meta charset="utf-8">
  <style>
    table { width: 100%; margin-bottom: 20px; border-collapse: collapse; }
    th, td { text-align: center; padding: 10px; border: 1px solid black; }
    .frame { cursor: pointer; }
    .modal { display: none; position: fixed; z-index: 1; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4); }
    .modal-content { margin: 15% auto; padding: 20px; width: 80%; }
    .close { color: #aaa; float: right; font-size: 28px; font-weight: bold; }
    .close:hover, .close:focus { color: black; text-decoration: none; cursor: pointer; }
  </style>
</head>
<body>
  <h1> 사우론٩(ↀДↀ)۶</h1>
  <hr />

  <h3>File Upload</h3>
  <form action="/uploadFile" enctype="multipart/form-data" method="post">
    <input type="file" name="attachment">
    <button type="submit" class="btn btn-primary">Upload</button>
  </form>
  <hr />

  <h3>File List</h3>
  <table>
    <thead>
      <tr>
        <th>Key</th>
        <th>LastModified</th>
        <th>Size</th>
        <th>StorageClass</th>
        <th>Down</th>
        <th>Del</th>
        <th>Process</th>
      </tr>
    </thead>
    <tbody id="fileList">
    </tbody>
  </table>

  <h3>Customer List</h3>
  <table>
    <thead>
      <tr>
        <th>Image</th>
        <th>Filename</th>
        <th>Del</th>
      </tr>
    </thead>
    <tbody id="framesContainer">
    </tbody>
  </table>

  <!-- Modal for image display -->
  <div id="myModal" class="modal">
    <span class="close">&times;</span>
    <img class="modal-content" id="modalImg">
  </div>

  <script>
    function loadFileList() {
      fetch('/list')
        .then(response => response.json())
        .then(data => {
          const fileList = document.getElementById('fileList');
          fileList.innerHTML = ''; // Clear existing content
          data.forEach(file => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${file.Key}</td>
              <td>${new Date(file.LastModified).toLocaleString()}</td>
              <td>${file.Size}</td>
              <td>${file.StorageClass}</td>
              <td><button class="down-button" data-filename="${file.Key}">down</button></td>
              <td><button class="del-button" data-filename="${file.Key}">del</button></td>
              <td><button class="process-button" data-filename="${file.Key}">process</button></td>
            `;
            fileList.appendChild(row);
          });
          addDeleteEventListeners();
          addProcessEventListeners();
        });
    }

    function loadFrames() {
      fetch('/view_frames')
        .then(response => response.json())
        .then(data => {
          const framesContainer = document.getElementById('framesContainer');
          framesContainer.innerHTML = ''; // Clear existing content
          data.forEach(frame => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td><img src="${frame.url}" class="frame" alt="${frame.filename}" width="100"></td>
              <td>${frame.filename}</td>
              <td><button class="del-button" data-filename="${frame.filename}">del</button></td>
            `;
            framesContainer.appendChild(row);
          });
          addFrameDeleteEventListeners();
          addFrameClickEventListeners();
        });
    }

    function addDeleteEventListeners() {
      document.querySelectorAll('.del-button').forEach(button => {
        button.onclick = function() {
          const filename = this.dataset.filename;
          deleteFile(filename, this.parentElement.parentElement); // 전달할 부모 요소는 tr입니다
        };
      });
    }

    function addProcessEventListeners() {
      document.querySelectorAll('.process-button').forEach(button => {
        button.onclick = function() {
          const filename = this.dataset.filename;
          processFile(filename); // 파일을 처리하는 함수 호출
        };
      });
    }

    function addFrameDeleteEventListeners() {
      document.querySelectorAll('#framesContainer .del-button').forEach(button => {
        button.onclick = function() {
          const filename = this.dataset.filename;
          deleteFrame(filename, this.parentElement.parentElement); // 전달할 부모 요소는 tr입니다
        };
      });
    }

    function addFrameClickEventListeners() {
      document.querySelectorAll('.frame').forEach(img => {
        img.onclick = function() {
          document.getElementById('modalImg').src = this.src;
          document.getElementById('myModal').style.display = "block";
        };
      });
    }

    function deleteFile(filename, row) {
      fetch(`/deleteFile`, { 
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ dlKey: filename })
        })
        .then(response => response.json())
        .then(data => {
          if (data.message === 'File deleted successfully') {
            row.remove(); // 삭제된 파일의 DOM 요소 제거
          } else {
            alert('Error deleting file');
          }
        });
    }

    function processFile(filename) {
      fetch(`/processVideo`, { 
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ dlKey: filename })
        })
        .then(response => response.json())
        .then(data => {
          if (data.message === 'File processed successfully') {
            alert('File processed successfully');
          } else {
            alert('Error processing file');
          }
        });
    }

    function deleteFrame(filename, row) {
      fetch(`/delete_frame?filename=${filename}`, { method: 'DELETE' })
        .then(response => response.json())
        .then(data => {
          if (data.message === 'File deleted successfully') {
            row.remove(); // 삭제된 프레임의 DOM 요소 제거
          } else {
            alert('Error deleting frame');
          }
        });
    }

    document.addEventListener('DOMContentLoaded', function() {
      loadFileList();
      loadFrames();
    });

    var modal = document.getElementById("myModal");
    var span = document.getElementsByClassName("close")[0];
    span.onclick = function() {
      modal.style.display = "none";
    }
    window.onclick = function(event) {
      if (event.target == modal) {
        modal.style.display = "none";
      }
    }
  </script>
</body>
</html>
